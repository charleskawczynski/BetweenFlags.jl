var documenterSearchIndex = {"docs":
[{"location":"api/#BetweenFlags-API-Documentation","page":"API","title":"BetweenFlags API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = BetweenFlags","category":"page"},{"location":"api/","page":"API","title":"API","text":"BetweenFlags.Flag\r\nBetweenFlags.FlagPair","category":"page"},{"location":"api/#BetweenFlags.Flag","page":"API","title":"BetweenFlags.Flag","text":"Flag(flag::String,\n     flag_boundaries_left::Vector{String},\n     flag_boundaries_right::Vector{String})\n\nA flag that BetweenFlags looks for to denote the start/stop position of a given scope. The flag boundaries need only be unique since every permutation of left and right flag boundaries are taken to determine scopes.\n\njulia>\nusing BetweenFlags\n# find: [\"\\nfunction\", \" function\", \";function\"]\nstart_flag = Flag(\"function\",\n                  [\"\\n\", \"\\s\", \";\"],\n                  [\"\\n\", \"\\s\"],\n                  StartType())\n# find: [\"\\nend\", \" end\", \";end\"]\nstop_flag = Flag(\"end\",\n                 [\"\\n\", \"\\s\", \";\"],\n                 [\"\\n\", \"\\s\", \";\"],\n                 StopType())\n\n\n\n\n\n","category":"type"},{"location":"api/#BetweenFlags.FlagPair","page":"API","title":"BetweenFlags.FlagPair","text":"FlagPair(start::Flag, stop::Flag)\n\nA flag pair that defines the start and stop of the substring of interest.\n\njulia>\nusing BetweenFlags\n# find: [\"\\nfunction\", \" function\", \";function\"]\nstart_flag = Flag(\"function\",\n                  [\"\\n\", \"\\s\", \";\"],\n                  [\"\\n\", \"\\s\"],\n                  StartType())\n# find: [\"\\nend\", \" end\", \";end\"]\nstop_flag = Flag(\"end\",\n                 [\"\\n\", \"\\s\", \";\"],\n                 [\"\\n\", \"\\s\", \";\"],\n                 StopType())\nflag_pair = FlagPair(start_flag, stop_flag)\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"BetweenFlags.tokenize","category":"page"},{"location":"api/#BetweenFlags.tokenize","page":"API","title":"BetweenFlags.tokenize","text":"tokenize(\n    code::S,\n    flag_set::FlagSet;\n    inclusive::Bool = true\n) where {S<:AbstractString, FP<:FlagPair}\n\nA dictionary whose keys are the flag IDs, and whose values are vectors of Ints indicating the nestedness of the flag.\n\n\n\n\n\n","category":"function"},{"location":"#BetweenFlags.jl","page":"Home","title":"BetweenFlags.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BetweenFlags.jl is a text-grepping tool that can be used with greedy or scope-aware configurations.","category":"page"},{"location":"#Greedy","page":"Home","title":"Greedy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using BetweenFlags\r\n\r\nflag_set = FlagSet([\r\n            FlagPair(\r\n                Flag(\"{\", [\"\"], [\"\"], flag_type=StartType()),\r\n                Flag(\"}\", [\"\"], [\"\"])\r\n            )\r\n          ]);\r\n\r\ntext = \"Foo, {bar {foobar} baz}, foobaz...\";\r\n\r\ntoken_stream = BetweenFlags.tokenize(text, flag_set);\r\n\r\nBetweenFlags.get_string(text, token_stream, \"{-}\")\r\n\"{bar {foobar}\"","category":"page"},{"location":"#Scope-aware","page":"Home","title":"Scope-aware","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using BetweenFlags\r\n\r\nflag_set = FlagSet([\r\n            FlagPair(\r\n                Flag(\"{\", [\"\"], [\"\"], flag_type=StartType()),\r\n                Flag(\"}\", [\"\"], [\"\"], flag_type=StopType())\r\n            )\r\n          ]);\r\n\r\ntext = \"Foo, {bar {foobar} baz}, foobaz...\";\r\n\r\ntoken_stream = BetweenFlags.tokenize(text, flag_set);\r\n\r\nBetweenFlags.get_string(text, token_stream, \"{-}\")\r\n\"{bar {foobar} baz}\"","category":"page"}]
}
